Create a Password verifications class called “PasswordVerifier”.

1. Add the following verifications to a master function called “Verify()”

   1. - password should be larger than 8 chars
   2. - password should not be null
   3. - password should have one uppercase letter at least
   4. - password should have one lowercase letter at least
   5. - password should have one number at least

 Each one of these should throw an exception with a different message of your choosing

2. Add feature: Password is OK if at least three of the previous conditions is true
3. Add feature: password is never OK if item 1.4 is not true.
4. Assume Each verification takes 1 second to complete. How would you solve  items 2 and 3  so tests can run faster?
























# Run with Elishay

## 20210914 - driver hanokh, navigator elishay
what did we learn?
1. :( Prepare unit test framework + ide before kata
2. :( prepare init kata project
3. :) The kata is actually about the negative case
4. :) using one test for good passwords is tedious, but generates less tests
5. :) require uses path to js file, not name of class.
6. :( we didn't reaqd through the kata

## 20211005 - driver elishay, driver(guide) hanokh
what did we learn?
1. :( if (isNull || isLongEnough) is translated to is (true || null) which is equal to null!! (test failed - expected true, actual null)
2. :) We need to always write the first test as a passing test, and update the password accordinglt for each step
3. :) We need to consider the null case as a base case








# Q&Q

## javascript


### install project
 Hanokh.Aloni@Hanokh_Al-pc  C:  temp 
❯ cd kata
 Hanokh.Aloni@Hanokh_Al-pc  C:  temp  kata 
❯ npm init
npm notice
npm notice New minor version of npm available! 7.0.15 -> 7.23.0
npm notice Changelog: https://github.com/npm/cli/releases/tag/v7.23.0
npm notice Run npm install -g npm@7.23.0 to update!
npm notice
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (kata)
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to C:\temp\kata\package.json:

{
  "name": "kata",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this OK? (yes) yes
 Hanokh.Aloni@Hanokh_Al-pc  C:  temp  kata 
❯ npm install --save-dev jest

added 328 packages, and audited 328 packages in 16s

25 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
 Hanokh.Aloni@Hanokh_Al-pc  C:  temp  kata 
❯ code .
 Hanokh.Aloni@Hanokh_Al-pc  C:  temp  kata 
❯
### prerequisites

1. install vscode
2. install test-expllorer plugin
3. install vscode-jest plugin (4.1 and above)
4. reload plugin

